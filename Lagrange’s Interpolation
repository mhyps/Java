import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Lagrange {

    private static Scanner input = new Scanner(System.in);

    public static void main(String[] args) {

        System.out.println("Enter number of nodes: ");
        int numberOfTerms = input.nextInt();


        double[] x = new double[numberOfTerms];
        double[] y = new double[numberOfTerms];


        System.out.println("Enter elements to array of xs: ");

        for (int i = 0; i < x.length; i++) {
            x[i] = input.nextDouble();
        }

        System.out.println("Enter elements to array of ys: ");
        for (int i = 0; i < x.length; i++) {
            y[i] = input.nextDouble();
        }

        input.nextLine();
        System.out.println("Enter a value for calculation: ");

        int pointX;

        pointX = input.nextInt();

        System.out.println("Results: ");

        action(x,y,pointX);


    }


    //getting results out of Neville's algorithm

    private static void action(double[] x,double[] y,int point){


        List<Double> results = new ArrayList<>();
        List<Double> firstNumb = new ArrayList<>();


        for (int i = 1; i < x.length; i++) {
            results.add((y[i] - y[i-1])/(x[i] - x[i-1]));
            if ((i-1) == 0) firstNumb.add(results.get(0));
            System.out.println(results.get(i-1));
        }
        int numberOfEle = results.size();

        while (numberOfEle > 1){
            for (int i = 1; i < numberOfEle; i++) {
                double n = (results.get(i) - results.get(i-1))/
                        ( x[x.length-numberOfEle+i] - x[i-1]);
                System.out.println(n);
                results.set(i-1,n);
                if ((i-1) == 0) firstNumb.add(results.get(0));

            }

            numberOfEle--;
        }

        //output the formula

        String formula = "L(x) = " + y[0] * 1;
        
        for (int i = 0; i < firstNumb.size(); i++) {
            int j = 0;
            formula += (firstNumb.get(i) >= 0 ? (" + " + firstNumb.get(i)) : (firstNumb.get(i)));

            while (i >= j){
                formula += "*(x" + (x[j] >= 0 ? (" - " + x[j]) : (" + "+ -1*x[j])) + ")";
                j++;
            }
            
        }
        System.out.println(formula);

        int temp = 1,sum = 0;

        for (int i = 0; i < x.length; i++) {
            for (int j = 0; j < x.length; j++) {
                if (j != i) {
                    temp *= (point - x[j]) / (x[i] - x[j]);
                }
            }
            sum += temp * y[i];

            temp = 1;
        }

        System.out.println("L(" + point + ") = " + sum);

    }



}

